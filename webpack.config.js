const path = require('path');
const fs = require('fs');
const HtmlWebpackPlugin = require('html-webpack-plugin');

// App directory
const appDirectory = fs.realpathSync(process.cwd());

// Gets absolute path of file within app directory
const resolveAppPath = relativePath => path.resolve(appDirectory, relativePath);

// Host
const host = process.env.HOST || 'localhost';

const importsLoader = {
    loader: 'imports-loader',
    options: "this=>window"
  };

// Required for babel-preset-react-app
process.env.NODE_ENV = 'development';

module.exports = {

    // Environment mode
    mode: 'development',
  
    // Entry point of app
    entry: {
        //'main': resolveAppPath('src'),
        'main': [resolveAppPath("src") /*,resolveAppPath("sigma_main.js")*/],


    },
  
    output: {
  
      // Development filename output
      filename: 'static/js/bundle.js',
    },
    devServer: {

        // Serve index.html as the base
        contentBase: resolveAppPath('public'),
    
        // Enable compression
        compress: true,
    
        // Enable hot reloading
        hot: true,
    
        host,
    
        port: 3000,
    
        // Public path is root of content base
        publicPath: '/',
    
      },

      //plugin???
      plugins:[
          new HtmlWebpackPlugin({
              inject:true,
              template:resolveAppPath('public/index.html')
          })
      ],

      module:{
          rules:[
            { test: /sigma.*/, use:[importsLoader], },
              {
                  test: /\.(js|jsx)$/,
                  exclude: /node_modules/,
                  include: resolveAppPath('src'),
                  loader: 'babel-loader',
                  options:{
                      presets:[
                          require.resolve('babel-preset-react-app'),
                      ]
                  }
              },
              
            //{ test: /sigma\/.*\/sigma.layout.forceAtlas2\/.*\.js/, use: [importsLoader] }
          ],
      },
  }